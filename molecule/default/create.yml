---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  #  no_log: "{{ molecule_no_log }}"
  no_log: false
  vars:
    ssh_user: admin
    ssh_port: 22
    security_group_name: molecule
    security_group_description: Security group for testing Molecule
# MAY need to set these with set_fact so we can dynamically bring in the IPs from workers.buddy.works
    security_group_rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: '0.0.0.0/0'

    keypair_name: DylanHumphreys
    keypair_path: "/home/dylanh/.ssh/id_rsa"
    #    keypair_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"
  tasks:
# Auto white list buddy worker ips
    - name: set core security rules
      set_fact:
        security_group_rules:
          - proto: icmp
            from_port: 8
            to_port: -1
            cidr_ip: '0.0.0.0/0'

# TODO this should be removed in favour of terraform setting it up, however since we dont have the web estate
# setup with terraform yet, its a good a place as any for it.
# The role itself should not be concerned with setting up infrastructure. Thats terraforms job
# I imagine the process for testing roles in the future
# will be:
# 1) standup test infrastructure using terraform
# 2) apply the role and check it works
# Will probably require a terraform driver for molecule. Or use the delegated one

# Now get the public ip of the router we are accessing the interwebs from
    - name: get your public ip
      ipify_facts:

    - name: set rules for your public ip
      set_fact:
        your_security_group_rules:
          - proto: tcp
            from_port: "0"
            to_port: "80"
            cidr_ip: '{{ ipify_public_ip }}/32'
          - proto: tcp
            from_port: "0"
            to_port: "443"
            cidr_ip: '{{ ipify_public_ip }}/32'
          - proto: tcp
            from_port: "0"
            to_port: "22"
            cidr_ip: '{{ ipify_public_ip }}/32'

# Finally combine the lists into security_group_rules
    - name: combine lists
      set_fact:
        security_group_rules: "{{ security_group_rules + your_security_group_rules }}"

# provision ec2 stuff
    - name: Create security group
      ec2_group:
        name: "{{ security_group_name }}"
        description: "{{ security_group_name }}"
        rules: "{{ security_group_rules }}"
        rules_egress: "{{ security_group_rules_egress }}"

    - name: Test for presence of local keypair
      stat:
        path: "{{ keypair_path }}"
      register: keypair_local

    - name: Delete remote keypair
      ec2_key:
        name: "{{ keypair_name }}"
        state: absent
      when: not keypair_local.stat.exists

    - name: Create keypair
      ec2_key:
        name: "{{ keypair_name }}"
      register: keypair

    - name: Persist the keypair
      copy:
        dest: "{{ keypair_path }}"
        content: "{{ keypair.key.private_key }}"
        mode: 0600
      when: keypair.changed

    - name: Get the ec2 ami(s) by owner and name, if image not set
      ec2_ami_facts:
        owners: "{{ item.image_owner }}"
        filters:
          name: "{{ item.image_name }}"
      loop: "{{ molecule_yml.platforms }}"
      when: item.image is not defined
      register: ami_facts

    - name: Create molecule instance(s)
      ec2:
        key_name: "{{ keypair_name }}"
        image: "{{ item.image
          if item.image is defined
          else (ami_facts.results[index].images | sort(attribute='creation_date', reverse=True))[0].image_id }}"
        instance_type: "{{ item.instance_type }}"
        vpc_subnet_id: "{{ item.vpc_subnet_id }}"
        group: "{{ security_group_name }}"
        instance_tags: "{{ item.instance_tags | combine({'instance': item.name})
          if item.instance_tags is defined
          else {'instance': item.name} }}"
        wait: true
        assign_public_ip: true
        exact_count: 1
        count_tag:
          instance: "{{ item.name }}"
      register: server
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        index_var: index
      async: 7200
      poll: 0

    - name: Wait for instance(s) creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: ec2_jobs
      until: ec2_jobs.finished
      retries: 300
      with_items: "{{ server.results }}"

    # Mandatory configuration for Molecule to function.

    - name: Populate instance config dict
      set_fact:
        instance_conf_dict: {
          'instance': "{{ item.instances[0].tags.instance }}",
          'address': "{{ item.instances[0].public_ip }}",
          'user': "{{ ssh_user }}",
          'port': "{{ ssh_port }}",
          'identity_file': "{{ keypair_path }}",
          'instance_ids': "{{ item.instance_ids }}",
        }
      with_items: "{{ ec2_jobs.results }}"
      register: instance_config_dict
      when: server.changed | bool

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      when: server.changed | bool

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"
      when: server.changed | bool

    - name: Wait for SSH
      wait_for:
        port: "{{ ssh_port }}"
        host: "{{ item.address }}"
        search_regex: SSH
        delay: 10
        timeout: 320
      with_items: "{{ lookup('file', molecule_instance_config) | molecule_from_yaml }}"

    - name: Wait for boot process to finish
      pause:
        minutes: 2
